AWSTemplateFormatVersion: '2010-09-09'
Description: ReservaPlus Ultra Simple Lambda + API Gateway

Parameters:
  S3Bucket:
    Type: String
    Description: S3 bucket containing Lambda code

Resources:
  # Lambda Execution Role
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"

  # Lambda Function
  GetPlansFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: reservaplus-get-plans-simple
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: get-plans.zip
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: reservaplus-dev
      Timeout: 30

  # API Gateway
  API:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: reservaplus-simple-api

  # Lambda Permission
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetPlansFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/*"

  # Resource
  PlansResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !GetAtt API.RootResourceId
      PathPart: plans

  # GET Method
  PlansMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref PlansResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPlansFunction.Arn}/invocations"

  # OPTIONS Method for CORS
  PlansOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref PlansResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false

  # Deployment
  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - PlansMethod
      - PlansOptionsMethod
    Properties:
      RestApiId: !Ref API
      StageName: dev

Outputs:
  ApiUrl:
    Description: API Gateway URL
    Value: !Sub "https://${API}.execute-api.${AWS::Region}.amazonaws.com/dev/plans"
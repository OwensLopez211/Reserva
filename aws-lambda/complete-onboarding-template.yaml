AWSTemplateFormatVersion: '2010-09-09'
Description: ReservaPlus Complete Onboarding Infrastructure with API Gateway

Parameters:
  S3Bucket:
    Type: String
    Description: S3 bucket containing Lambda code zip files
    Default: your-lambda-code-bucket

Resources:
  # Lambda Execution Role
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: 
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/reservaplus-dev"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/reservaplus-dev/index/*"
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminSetUserPassword
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminUpdateUserAttributes
                Resource: "*"

  # Lambda Functions
  GetPlansFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: reservaplus-get-plans
      Runtime: nodejs18.x
      Handler: plans/get-available-plans.handler
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: lambda-functions.zip
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: reservaplus-dev
      Timeout: 30

  StartSignupFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: reservaplus-start-signup
      Runtime: nodejs18.x
      Handler: auth/start-signup.handler
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: lambda-functions.zip
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: reservaplus-dev
          COGNITO_USER_POOL_ID: !Ref CognitoUserPool
      Timeout: 30

  CompleteOnboardingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: reservaplus-complete-onboarding
      Runtime: nodejs18.x
      Handler: onboarding/complete-onboarding.handler
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: lambda-functions.zip
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: reservaplus-dev
      Timeout: 30

  CheckRegistrationStatusFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: reservaplus-check-registration-status
      Runtime: nodejs18.x
      Handler: auth/check-registration-status.handler
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: lambda-functions.zip
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: reservaplus-dev
      Timeout: 30

  CheckUserStatusFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: reservaplus-check-user-status
      Runtime: nodejs18.x
      Handler: auth/check-user-status.handler
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: lambda-functions.zip
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: reservaplus-dev
      Timeout: 30

  GetProfileFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: reservaplus-get-profile
      Runtime: nodejs18.x
      Handler: users/get-profile.handler
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: lambda-functions.zip
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: reservaplus-dev
      Timeout: 30

  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: reservaplus-users
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate:
          - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: given_name
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: family_name
          AttributeDataType: String
          Required: true
          Mutable: true

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: reservaplus-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH

  # API Gateway
  API:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: reservaplus-api
      Description: ReservaPlus API Gateway for Lambda functions
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resources
  PlansResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !GetAtt API.RootResourceId
      PathPart: plans

  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !GetAtt API.RootResourceId
      PathPart: auth

  SignupResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !Ref AuthResource
      PathPart: signup

  RegistrationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !Ref AuthResource
      PathPart: registration

  RegistrationTokenResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !Ref RegistrationResource
      PathPart: '{token}'

  UserStatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !Ref AuthResource
      PathPart: user-status

  OnboardingResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !GetAtt API.RootResourceId
      PathPart: onboarding

  CompleteOnboardingResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !Ref OnboardingResource
      PathPart: complete

  UsersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !GetAtt API.RootResourceId
      PathPart: users

  ProfileResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !Ref UsersResource
      PathPart: profile

  # API Gateway Methods
  GetPlansMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref PlansResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPlansFunction.Arn}/invocations"

  PostSignupMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref SignupResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StartSignupFunction.Arn}/invocations"

  GetRegistrationStatusMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref RegistrationTokenResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CheckRegistrationStatusFunction.Arn}/invocations"

  GetUserStatusMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref UserStatusResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CheckUserStatusFunction.Arn}/invocations"

  PostCompleteOnboardingMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref CompleteOnboardingResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CompleteOnboardingFunction.Arn}/invocations"

  GetProfileMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref ProfileResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetProfileFunction.Arn}/invocations"

  # CORS OPTIONS Methods
  PlansOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref PlansResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false

  SignupOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref SignupResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false

  CompleteOnboardingOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref CompleteOnboardingResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false

  # Lambda Permissions
  GetPlansPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetPlansFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/*"

  StartSignupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StartSignupFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/*"

  CompleteOnboardingPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CompleteOnboardingFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/*"

  CheckRegistrationStatusPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CheckRegistrationStatusFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/*"

  CheckUserStatusPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CheckUserStatusFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/*"

  GetProfilePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetProfileFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/*"

  # API Gateway Deployment
  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GetPlansMethod
      - PostSignupMethod
      - GetRegistrationStatusMethod
      - GetUserStatusMethod
      - PostCompleteOnboardingMethod
      - GetProfileMethod
      - PlansOptionsMethod
      - SignupOptionsMethod
      - CompleteOnboardingOptionsMethod
    Properties:
      RestApiId: !Ref API
      StageName: dev

Outputs:
  ApiGatewayUrl:
    Description: API Gateway base URL
    Value: !Sub "https://${API}.execute-api.${AWS::Region}.amazonaws.com/dev"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"

  CognitoUserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref CognitoUserPool
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolId"

  CognitoUserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolClientId"

  DynamoDBTableName:
    Description: DynamoDB Table Name
    Value: reservaplus-dev
    Export:
      Name: !Sub "${AWS::StackName}-TableName"
AWSTemplateFormatVersion: '2010-09-09'
Description: ReservaPlus Signup API with CORS Support

Parameters:
  S3Bucket:
    Type: String
    Description: S3 bucket containing Lambda code
  Environment:
    Type: String
    Default: dev
    Description: Environment name

Resources:
  # DynamoDB Table
  MainTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "reservaplus-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "reservaplus-users-${Environment}"
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireUppercase: false
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub "reservaplus-client-${Environment}"
      GenerateSecret: false
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH

  # Lambda Execution Role
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !GetAtt MainTable.Arn
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:*
                Resource: !GetAtt UserPool.Arn

  # Start Signup Lambda Function
  StartSignupFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "reservaplus-start-signup-${Environment}"
      Runtime: nodejs18.x
      Handler: start-signup.handler
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: auth/start-signup.zip
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref MainTable
          USER_POOL_ID: !Ref UserPool
      Timeout: 30

  # API Gateway
  API:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "reservaplus-api-${Environment}"
      Description: ReservaPlus API for authentication and onboarding

  # Auth Resource
  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !GetAtt API.RootResourceId
      PathPart: auth

  # Signup Resource
  SignupResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !Ref AuthResource
      PathPart: signup

  # Signup POST Method
  SignupPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref SignupResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StartSignupFunction.Arn}/invocations"

  # Signup OPTIONS Method for CORS
  SignupOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref SignupResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Max-Age: "'86400'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Max-Age: false

  # Lambda Permission for API Gateway
  StartSignupLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StartSignupFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/*"

  # API Deployment
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - SignupPostMethod
      - SignupOptionsMethod
    Properties:
      RestApiId: !Ref API
      StageName: !Ref Environment

Outputs:
  APIGatewayURL:
    Description: API Gateway URL
    Value: !Sub "https://${API}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${AWS::StackName}-api-url"
  
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub "${AWS::StackName}-user-pool-id"
  
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "${AWS::StackName}-user-pool-client-id"

  SignupEndpoint:
    Description: Signup endpoint URL
    Value: !Sub "https://${API}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/auth/signup"